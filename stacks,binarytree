
#include <iostream>
#include<stack>
#include<vector>
#include <queue>
using namespace std;

class Stack
{

    public:
         Stack();

        ~Stack();

        void enqueue(int x);

        void dequeue();

        int peekFront();

        bool isEmpty();

    private:

        stack<int> data;

        stack<int> obj;

};

Stack::Stack(){

}

Stack::~Stack(){

}

void Stack :: enqueue(int x)
{
    data.push(x);
}

void Stack :: dequeue()
{

    if (data.size() != 0)
        {
            for (int i = data.size(); i > 1; i--)
            {

                obj.push(data.top());

                data.pop();
            }

        data.pop();

        for (int i = obj.size(); i >= 1; i--)
            {
                data.push(obj.top());

                obj.pop();
            }
        }
}

int Stack:: peekFront()
{

    int size = data.size();
    for (int i = size; i > 1; i--)

        {
            obj.push (data.top());


            data.pop();

        }

    int top = data.top();

    size = data.size();

    for (int a = size; a >= 1; a--)
        {

            data.push (obj.top());

            obj.pop();

        }

    return top;

}

bool Stack :: isEmpty()

{

    return data.size() == 0;

}
///////////////////////
struct Nodes
{
    int item;
    struct Nodes *left;
    struct Nodes *right;
};

void print (Nodes *root)
{

    if (root == NULL)
    {
        return;
    }

    queue<Nodes *> a;
    a.push(root);

    while (1)
    {

        int nodeCount = a.size();

        if (nodeCount == 0)
        {
            break;
        }

        while (nodeCount > 0)
        {
            Nodes *Nodes = a.front();

            cout << Nodes->item << " ";
            a.pop();

            if (Nodes->left != NULL)
            {
                a.push(Nodes->left);
            }

            if (Nodes->right != NULL)
            {
                a.push(Nodes->right);
            }

            nodeCount--;

        }
        cout << endl;
    }
}
/////////////minDepth function
int minimumDepth(Nodes *root)
{

    if (root == NULL)
    {
        return 0;
    }


    if (root->left == NULL && root->right == NULL)
    {
        return 1;
    }


    if (!root->left)
        {
            return minimumDepth(root->right) + 1;
        }


    if (!root->right)
       return minimumDepth(root->left) + 1;

    return min(minimumDepth(root->left), minimumDepth(root->right)) + 1;
}
/////////////

Nodes* newNode(int item)
{
    Nodes *temp = new Nodes;
    temp->item = item;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}


int main()
{
    Stack que;

    cout << "***Queue is being created***" << endl;
    cout << endl;

    cout << "Numbers will be added: " << endl;

    for ( int i = 1; i < 6; i++)
        {
            que.enqueue(i);

            cout << i << endl;
        }
        cout << endl;

        cout << que.peekFront() << " is at the beginning." << endl;

        cout << endl;

    if (que.isEmpty())
        {
            cout << "Empty." << endl;
        }

    else
        {
            cout << "Not empty." << endl;
        }

    for (int i = 0; i < 3; i++)
        {
        que.dequeue();
        cout << "Object removed." << endl;
        }

    cout << que.peekFront() << " is in the beginning." << endl;

cout << endl;

    if (que.isEmpty())
        {
            cout << "Empty." << endl;
        }

    else
        {
            cout << "Not empty." << endl;
        }

    for (int i = 0; i < 2; i++)
        {
            que.dequeue();

            cout << "Object is removed." << endl;
        }

    if (que.isEmpty())
        {
            cout << "Queue is empty" << endl;
        }

    else
        {
            cout << "Queue is not empty" << endl;
        }

cout << endl;
cout << "Question 2:" << endl;


    Nodes *root = newNode(3);
    root->left = newNode(9);
    root->right = newNode(20);
    root->left->left = newNode(NULL);
    root->left->right = newNode(NULL);
    root->right->right = newNode(15);
    root->right->left = newNode(7);

    cout << endl;
    print(root);
    cout << endl;

    cout << "Question 3:" << endl;
    cout << endl;
    cout << "Minumum depth: " << minimumDepth(root);
    cout << endl;
    return 0;
}
